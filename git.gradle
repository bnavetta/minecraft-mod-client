apply plugin: GitPlugin

class GitPlugin implements Plugin<Project>
{	
	void apply(Project project)
	{
		project.extensions.create('git', GitPluginExtension)
		project.tasks.add('status', StatusTask)
		project.tasks.add('push', PushTask)
		project.tasks.add('add', AddTask)
	}
}

class GitPluginExtension
{
	String remote
	String branch
}

abstract class BaseGitTask extends DefaultTask
{
	int execute(String cmd)
	{
		Process proc = cmd.execute()
		proc.consumeProcessOutput(System.out, System.err);
		Thread.startDaemon {
			proc.getOut() << System.in
		}
		return proc.waitFor()
	}
}

class StatusTask extends BaseGitTask
{
	@TaskAction
	def status()
	{
		int retVal = execute('git status')
		if(retVal != 0)
		{
			throw new GradleException("git status exited with nonzero status")
		}
	}
}

class PushTask extends BaseGitTask
{
	@TaskAction
	def push()
	{
		def remote = project.git.remote ?: ''
		def branch = project.git.branch ?: ''
		if(execute("git push ${remote} ${branch}") != 0)
			throw new GradleException('git push exited with nonzero status')
	}
}

class AddTask extends BaseGitTask
{
	@TaskAction
	def add()
	{
		if(System.getProperty('git.allfiles'))
		{
			if(execute('git add -A') != 0)
				throw new GradleException('git add exited with nonzero status')
		}
		else
		{
			def files = []
			if(System.getProperty('git.files')) //i.e. -Dgit.files='foo.txt:bar.txt' (or -Dgit.files=foo.txt;bar.txt on windows)
			{
				System.getProperty('git.files').split(File.pathSeparator).each {
					files << project.file(it)
				}
			}
			else
			{
				println 'Enter file names one at a time:'
				Scanner scanner = new Scanner(System.in)
				while(scanner.hasNextLine())
				{
					files << project.file(scanner.nextLine())
				}
			}
			
			if(execute("git add ${files.join(' ')}") != 0)
				throw new GradleException('git add exited with nonzero status')
		}
	}
}